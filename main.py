import os
import io
import tempfile
import subprocess
from pathlib import Path
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from PyPDF2 import PdfWriter, PdfReader
from PIL import Image


user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    commands = [
        "üìÑ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é",
        "/newpdf - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç",
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ PDF",
        "",
        "üìå <b>–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:</b>",
        "/done - –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "",
        "üñº <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>",
        "1. –ù–∞—á–Ω–∏—Ç–µ —Å /newpdf",
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–±—É–¥–µ—Ç –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω)",
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "4. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /done",
        "",
        "‚Ñπ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è"
    ]

    await update.message.reply_text(
        "\n".join(commands),
        parse_mode="HTML"
    )


async def new_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat.id
    user_data[chat_id] = {
        "step": "waiting_text",
        "text": None,
        "images": [],
        "processing": False
    }
    await update.message.reply_text(
        "‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è PDF (–±—É–¥–µ—Ç –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ):\n\n"
        "üñº –ü–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–Ω–∏ –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º)\n\n"
        "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ"
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat.id

    if chat_id not in user_data or user_data[chat_id]["step"] != "waiting_text":
        return

    user_data[chat_id]["text"] = update.message.text
    user_data[chat_id]["step"] = "waiting_images"

    await update.message.reply_text(
        "‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏ –±—É–¥–µ—Ç –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ PDF.\n\n"
        "üñº –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π "
        "(–æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è).\n\n"
        "‚è© /done - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å PDF\n"
        "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å"
    )


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    chat_id = update.message.chat.id

    if chat_id not in user_data or user_data[chat_id]["step"] != "waiting_images":
        return

    try:
        photo_file = await update.message.photo[-1].get_file()
        image_path = f"tmp_{chat_id}_{len(user_data[chat_id]['images'])}.jpg"
        await photo_file.download_to_drive(image_path)

        user_data[chat_id]["images"].append(image_path)

        await update.message.reply_text(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {len(user_data[chat_id]['images'])} –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ /done –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")


async def done_images(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat.id

    if chat_id not in user_data or user_data[chat_id].get("processing"):
        return

    user_data[chat_id]["processing"] = True
    await update.message.reply_text("‚è≥ –°–æ–∑–¥–∞—é PDF...")

    pdf_path = f"result_{chat_id}.pdf"
    success = create_centered_pdf(
        text=user_data[chat_id]["text"],
        image_paths=user_data[chat_id]["images"],
        output_path=pdf_path
    )

    if success:
        await send_result(update, pdf_path, chat_id)
    else:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF")
        cleanup_files(pdf_path, *user_data[chat_id]["images"])
        del user_data[chat_id]


def create_centered_pdf(text: str, image_paths: list, output_path: str) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç PDF —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø–æ–¥ –Ω–∏–º

    :param text: –¢–µ–∫—Å—Ç (–±—É–¥–µ—Ç –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    :param image_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–±—É–¥—É—Ç –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º)
    :param output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
        try:
            pdfmetrics.registerFont(TTFont('ArialUnicode', 'arial.ttf'))
            font_name = 'ArialUnicode'
        except:
            font_name = 'Helvetica'

        output = PdfWriter()
        packet = io.BytesIO()
        can = canvas.Canvas(packet, pagesize=letter)
        page_width, page_height = letter

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if text:
            can.setFont(font_name, 12)
            text_lines = text.split('\n')
            y_position = page_height - 100  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞

            for line in text_lines:
                line = line.strip()
                if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    text_width = can.stringWidth(line, font_name, 12)
                    x_position = (page_width - text_width) / 2
                    can.drawString(x_position, y_position, line)
                    y_position -= 20  # –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
        current_y = y_position - 50  # –û—Ç—Å—Ç—É–ø –æ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        for img_path in image_paths:
            if os.path.exists(img_path):
                img = Image.open(img_path)
                img_width, img_height = img.size

                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –≤–º–µ—â–∞–ª–æ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                max_width = page_width - 100
                max_height = (current_y - 50) if (current_y - 50) > 0 else page_height / 2

                scale_factor = min(
                    max_width / img_width,
                    max_height / img_height
                )

                scaled_width = img_width * scale_factor
                scaled_height = img_height * scale_factor

                # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º –æ—Ç —Ç–µ–∫—Å—Ç–∞/–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                x_pos = (page_width - scaled_width) / 2
                current_y -= scaled_height  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ Y

                if current_y < 50:  # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    can.save()
                    packet.seek(0)
                    output.add_page(PdfReader(packet).pages[0])

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    packet = io.BytesIO()
                    can = canvas.Canvas(packet, pagesize=letter)
                    current_y = page_height - scaled_height - 50
                    x_pos = (page_width - scaled_width) / 2

                can.drawImage(
                    img_path,
                    x_pos, current_y,
                    width=scaled_width,
                    height=scaled_height,
                    preserveAspectRatio=True
                )

                current_y -= 30  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

        can.save()
        packet.seek(0)
        output.add_page(PdfReader(packet).pages[0])

        with open(output_path, "wb") as f:
            output.write(f)

        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF: {e}")
        return False


async def send_result(update: Update, pdf_path: str, chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–π PDF –∏ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        with open(pdf_path, "rb") as pdf_file:
            await update.message.reply_document(
                document=pdf_file,
                caption="‚úÖ –í–∞—à PDF –≥–æ—Ç–æ–≤!\n\n"
                        "–¢–µ–∫—Å—Ç –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–¥ –Ω–∏–º."
            )
    except Exception as e:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
    finally:
        if chat_id in user_data:
            cleanup_files(pdf_path, *user_data[chat_id]["images"])
            del user_data[chat_id]


def cleanup_files(*file_paths) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    for path in file_paths:
        try:
            if path and os.path.exists(path):
                os.remove(path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {e}")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ PDF"""
    chat_id = update.message.chat.id
    if chat_id in user_data:
        cleanup_files(
            f"result_{chat_id}.pdf",
            *user_data[chat_id].get("images", [])
        )
        del user_data[chat_id]
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await update.message.reply_text("‚Ñπ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    await update.message.reply_text(
        "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /newpdf\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
    )
    print(f"–û—à–∏–±–∫–∞: {context.error}")



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    commands = [
        "üìÑ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é",
        "/newpdf - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π PDF –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "/convert - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª (DOCX, PPTX, TXT) –≤ PDF",
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
        "",
        "üìå <b>–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:</b>",
        "/done - –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "",
        "üñº <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è /convert:</b>",
        "‚Ä¢ DOC/DOCX (Word –¥–æ–∫—É–º–µ–Ω—Ç)",
        "‚Ä¢ PPTX (PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è)",
        "‚Ä¢ TXT (–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)"
    ]

    await update.message.reply_text(
        "\n".join(commands),
        parse_mode="HTML"
    )


async def convert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat.id
    user_data[chat_id] = {
        "mode": "waiting_conversion_file",
        "processing": False
    }

    await update.message.reply_text(
        "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è DOCX, PPTX, TXT):\n\n"
        "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
    )


async def handle_conversion_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    chat_id = update.message.chat.id

    if chat_id not in user_data or user_data[chat_id].get("mode") != "waiting_conversion_file":
        return

    if not update.message.document:
        await update.message.reply_text("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª")
        return

    document = update.message.document
    file_ext = Path(document.file_name).suffix.lower()

    if file_ext not in ('.doc', '.docx', '.pptx', '.txt'):
        await update.message.reply_text(
            "‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ:\n"
            "‚Ä¢ .doc/.docx\n‚Ä¢ .pptx\n‚Ä¢ .txt\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newpdf"
        )
        del user_data[chat_id]
        return

    user_data[chat_id]["processing"] = True
    await update.message.reply_text("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ñ–∞–π–ª...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file = await document.get_file()
        input_path = f"convert_input_{chat_id}{file_ext}"
        await file.download_to_drive(input_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
        output_path = f"converted_{chat_id}.pdf"

        if file_ext == '.txt':
            success = await simple_txt_to_pdf(input_path, output_path)
        else:
            success = convert_via_libreoffice(input_path, output_path)

        if success:
            with open(output_path, 'rb') as pdf_file:
                await update.message.reply_document(
                    document=pdf_file,
                    caption=f"‚úÖ –§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF: {document.file_name}"
                )
        else:
            await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")

    except Exception as e:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if 'input_path' in locals() and os.path.exists(input_path):
            os.remove(input_path)
        if 'output_path' in locals() and os.path.exists(output_path):
            os.remove(output_path)
        if chat_id in user_data:
            del user_data[chat_id]


async def simple_txt_to_pdf(input_path: str, output_path: str) -> bool:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TXT –≤ PDF"""
    try:
        with open(input_path, 'r', encoding='utf-8') as f:
            text = f.read()

        packet = io.BytesIO()
        can = canvas.Canvas(packet, pagesize=letter)

        try:
            pdfmetrics.registerFont(TTFont('ArialUnicode', 'arial.ttf'))
            font_name = 'ArialUnicode'
        except:
            font_name = 'Helvetica'

        can.setFont(font_name, 12)
        text_obj = can.beginText(40, 750)

        for line in text.split('\n'):
            text_obj.textLine(line.strip())

        can.drawText(text_obj)
        can.save()

        packet.seek(0)
        new_pdf_page = PdfReader(packet).pages[0]
        output = PdfWriter()
        output.add_page(new_pdf_page)

        with open(output_path, "wb") as f:
            output.write(f)

        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ TXT: {e}")
        return False


def convert_via_libreoffice(input_path: str, output_path: str) -> bool:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ PDF —á–µ—Ä–µ–∑ LibreOffice

    :param input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    :param output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        libreoffice_path = find_libreoffice()
        if not libreoffice_path:
            print("LibreOffice –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        output_dir = os.path.dirname(output_path)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)

        cmd = [
            libreoffice_path,
            '--headless',
            '--convert-to', 'pdf',
            '--outdir', output_dir,
            input_path
        ]

        result = subprocess.run(cmd, check=True, capture_output=True)

        if result.returncode == 0:
            # LibreOffice —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º –Ω–æ .pdf —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            expected_path = os.path.join(
                output_dir,
                f"{Path(input_path).stem}.pdf"
            )

            if os.path.exists(expected_path):
                # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                if expected_path != output_path:
                    os.rename(expected_path, output_path)
                return True

        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ LibreOffice: {result.stderr.decode()}")
        return False

    except subprocess.CalledProcessError as e:
        print(f"LibreOffice –æ—à–∏–±–∫–∞: {e.stderr.decode()}")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    return False


def find_libreoffice() -> str:
    """–ü–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ LibreOffice –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –û–°"""
    paths = [
        'C:\\Program Files\\LibreOffice\\program\\soffice.exe',
        '/Applications/LibreOffice.app/Contents/MacOS/soffice',
    ]

    for path in paths:
        if os.path.exists(path):
            return path

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ PATH
    try:
        libre_path = subprocess.check_output(['which', 'libreoffice']).decode().strip()
        if libre_path:
            return libre_path
    except:
        pass

    try:
        soffice_path = subprocess.check_output(['which', 'soffice']).decode().strip()
        if soffice_path:
            return soffice_path
    except:
        pass

    return None

def main() -> None:
    application = Application.builder().token("8063676245:AAHDmoeUUw7cxxgTCybeGV6hJjSZvA7PNcY").build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("newpdf", new_pdf))
    application.add_handler(CommandHandler("convert", convert_command))
    application.add_handler(CommandHandler("done", done_images))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    application.add_handler(MessageHandler(filters.Document.ALL & ~filters.COMMAND, handle_conversion_file))

    # –û—à–∏–±–∫–∏
    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()


